// msc.h
// Generado por Mojon Script Compiler de la Churrera
// Copyleft 2011 The Mojon Twins
 
// Script data & pointers
extern unsigned char mscce_0 [];
extern unsigned char mscce_1 [];
extern unsigned char mscce_2 [];
extern unsigned char mscce_3 [];
extern unsigned char mscce_4 [];
extern unsigned char mscce_5 [];
extern unsigned char mscce_6 [];
extern unsigned char mscce_7 [];
extern unsigned char mscce_8 [];
extern unsigned char mscce_9 [];
extern unsigned char mscce_10 [];
extern unsigned char mscce_11 [];
extern unsigned char mscce_12 [];
extern unsigned char mscce_13 [];
extern unsigned char mscce_14 [];
extern unsigned char mscce_15 [];
extern unsigned char mscce_16 [];
extern unsigned char mscce_17 [];
extern unsigned char mscce_18 [];
extern unsigned char mscce_19 [];
extern unsigned char mscce_20 [];
extern unsigned char mscce_21 [];
extern unsigned char mscce_22 [];
extern unsigned char mscce_23 [];
extern unsigned char mscce_24 [];
extern unsigned char mscce_25 [];
extern unsigned char msccf_0 [];
extern unsigned char msccf_1 [];
extern unsigned char msccf_2 [];
extern unsigned char msccf_3 [];
 
unsigned char *e_scripts [] = {
    mscce_2, mscce_3, mscce_4, mscce_5, mscce_6, mscce_7, mscce_8, mscce_9, mscce_10, mscce_11, mscce_12, mscce_13, mscce_14, mscce_15, mscce_16, mscce_17, mscce_18, mscce_19, mscce_20, mscce_21, mscce_22, mscce_23, mscce_24, mscce_25, mscce_0, mscce_1, 0
};
 
unsigned char *f_scripts [] = {
    msccf_3, 0, msccf_0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, msccf_1, msccf_2, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
 
#asm
._mscce_0

    defb 0x09, 0xF0, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x03, 0x00, 0xFF, 0xFF

._mscce_1

    defb 0x16, 0x31, 0x14, 0x10, 0x03, 0x00, 0xFF, 0x01, 0x03, 0x01, 0xE0, 0x07, 0xE0, 0x08, 0xE0, 0x09
    defb 0xE0, 0x07, 0xE0, 0x08, 0xE0, 0x09, 0xFF, 0xFF

._mscce_2

    defb 0xB3, 0xF0, 0xFF, 0x20, 0x03, 0x07, 0x16, 0x20, 0x04, 0x07, 0x17, 0x20, 0x04, 0x06, 0x2F, 0x20
    defb 0x01, 0x06, 0x14, 0x20, 0x01, 0x07, 0x15, 0x20, 0x06, 0x06, 0x14, 0x20, 0x06, 0x07, 0x15, 0x20
    defb 0x01, 0x03, 0x1F, 0x20, 0x02, 0x03, 0x18, 0x20, 0x03, 0x03, 0x19, 0x20, 0x09, 0x08, 0x25, 0x20
    defb 0x07, 0x03, 0x2C, 0x20, 0x03, 0x01, 0x08, 0x20, 0x03, 0x02, 0x23, 0x20, 0x06, 0x01, 0x08, 0x20
    defb 0x06, 0x02, 0x09, 0x20, 0x06, 0x03, 0x09, 0x20, 0x01, 0x01, 0x1E, 0x20, 0x04, 0x01, 0x1D, 0x20
    defb 0x07, 0x01, 0x1D, 0x20, 0x09, 0x01, 0x1E, 0x20, 0x0B, 0x01, 0x1D, 0x20, 0x0C, 0x01, 0x1E, 0x20
    defb 0x0D, 0x01, 0x1D, 0x20, 0x01, 0x05, 0x1D, 0x20, 0x03, 0x05, 0x1D, 0x20, 0x04, 0x05, 0x1E, 0x20
    defb 0x05, 0x05, 0x1D, 0x20, 0x0C, 0x05, 0x1D, 0x20, 0x00, 0x09, 0x1A, 0x20, 0x01, 0x09, 0x1A, 0x20
    defb 0x02, 0x09, 0x1A, 0x20, 0x03, 0x09, 0x1A, 0x20, 0x04, 0x09, 0x1A, 0x20, 0x05, 0x09, 0x1A, 0x20
    defb 0x06, 0x09, 0x1A, 0x20, 0x07, 0x09, 0x1A, 0x20, 0x08, 0x09, 0x1A, 0x20, 0x09, 0x09, 0x1A, 0x20
    defb 0x0A, 0x09, 0x1A, 0x20, 0x0B, 0x09, 0x1A, 0x20, 0x0C, 0x09, 0x1A, 0x20, 0x0D, 0x09, 0x1A, 0x20
    defb 0x0E, 0x09, 0x1A, 0xFF, 0xFF

._mscce_3

    defb 0x8B, 0xF0, 0xFF, 0x20, 0x04, 0x03, 0x2D, 0x20, 0x0D, 0x07, 0x1C, 0x20, 0x02, 0x01, 0x2B, 0x20
    defb 0x08, 0x03, 0x2C, 0x20, 0x0C, 0x01, 0x2B, 0x20, 0x04, 0x07, 0x2C, 0x20, 0x0C, 0x07, 0x2C, 0x20
    defb 0x03, 0x02, 0x23, 0x20, 0x05, 0x07, 0x24, 0x20, 0x09, 0x06, 0x23, 0x20, 0x01, 0x01, 0x1E, 0x20
    defb 0x05, 0x02, 0x1D, 0x20, 0x08, 0x01, 0x1E, 0x20, 0x09, 0x01, 0x1D, 0x20, 0x0C, 0x01, 0x1E, 0x20
    defb 0x04, 0x05, 0x1D, 0x20, 0x05, 0x05, 0x1E, 0x20, 0x06, 0x05, 0x1D, 0x20, 0x0C, 0x05, 0x1D, 0x20
    defb 0x00, 0x09, 0x1A, 0x20, 0x01, 0x09, 0x1A, 0x20, 0x02, 0x09, 0x1A, 0x20, 0x03, 0x09, 0x1A, 0x20
    defb 0x04, 0x09, 0x1A, 0x20, 0x05, 0x09, 0x1A, 0x20, 0x06, 0x09, 0x1A, 0x20, 0x07, 0x09, 0x1A, 0x20
    defb 0x08, 0x09, 0x1A, 0x20, 0x09, 0x09, 0x1A, 0x20, 0x0A, 0x09, 0x1A, 0x20, 0x0B, 0x09, 0x1A, 0x20
    defb 0x0C, 0x09, 0x1A, 0x20, 0x0D, 0x09, 0x1A, 0x20, 0x0E, 0x09, 0x1A, 0xFF, 0xFF

._mscce_4

    defb 0x9B, 0xF0, 0xFF, 0x20, 0x06, 0x08, 0x25, 0x20, 0x09, 0x03, 0x1C, 0x20, 0x01, 0x03, 0x2C, 0x20
    defb 0x05, 0x01, 0x2B, 0x20, 0x01, 0x05, 0x2B, 0x20, 0x03, 0x07, 0x2C, 0x20, 0x07, 0x05, 0x2B, 0x20
    defb 0x02, 0x03, 0x24, 0x20, 0x08, 0x02, 0x23, 0x20, 0x0A, 0x03, 0x24, 0x20, 0x08, 0x06, 0x23, 0x20
    defb 0x01, 0x01, 0x1D, 0x20, 0x02, 0x01, 0x1E, 0x20, 0x03, 0x01, 0x1D, 0x20, 0x09, 0x01, 0x1D, 0x20
    defb 0x0B, 0x01, 0x1E, 0x20, 0x0C, 0x01, 0x1D, 0x20, 0x07, 0x05, 0x1D, 0x20, 0x09, 0x05, 0x1D, 0x20
    defb 0x0A, 0x05, 0x1E, 0x20, 0x0C, 0x05, 0x1D, 0x20, 0x0B, 0x07, 0x2E, 0x20, 0x0D, 0x07, 0x29, 0x20
    defb 0x00, 0x09, 0x1A, 0x20, 0x01, 0x09, 0x1A, 0x20, 0x02, 0x09, 0x1A, 0x20, 0x03, 0x09, 0x1A, 0x20
    defb 0x04, 0x09, 0x1A, 0x20, 0x05, 0x09, 0x1A, 0x20, 0x06, 0x09, 0x1A, 0x20, 0x07, 0x09, 0x1A, 0x20
    defb 0x08, 0x09, 0x1A, 0x20, 0x09, 0x09, 0x1A, 0x20, 0x0A, 0x09, 0x1A, 0x20, 0x0B, 0x09, 0x1A, 0x20
    defb 0x0C, 0x09, 0x1A, 0x20, 0x0D, 0x09, 0x1A, 0x20, 0x0E, 0x09, 0x1A, 0xFF, 0x09, 0x10, 0x03, 0x01
    defb 0xFF, 0x20, 0x0B, 0x07, 0x00, 0xFF, 0xFF

._mscce_5

    defb 0x2F, 0xF0, 0xFF, 0x20, 0x0B, 0x01, 0x28, 0x20, 0x00, 0x09, 0x1A, 0x20, 0x01, 0x09, 0x1A, 0x20
    defb 0x02, 0x09, 0x1A, 0x20, 0x03, 0x09, 0x1A, 0x20, 0x0C, 0x09, 0x1A, 0x20, 0x0D, 0x09, 0x1A, 0x20
    defb 0x0E, 0x09, 0x1A, 0x20, 0x09, 0x03, 0x1A, 0x20, 0x0B, 0x05, 0x1A, 0x20, 0x09, 0x07, 0x1A, 0xFF
    defb 0xFF

._mscce_6

    defb 0x9B, 0xF0, 0xFF, 0x20, 0x04, 0x08, 0x2D, 0x20, 0x02, 0x05, 0x28, 0x20, 0x03, 0x05, 0x28, 0x20
    defb 0x04, 0x05, 0x28, 0x20, 0x05, 0x05, 0x28, 0x20, 0x0A, 0x07, 0x28, 0x20, 0x0B, 0x07, 0x28, 0x20
    defb 0x01, 0x00, 0x28, 0x20, 0x01, 0x02, 0x28, 0x20, 0x01, 0x04, 0x28, 0x20, 0x03, 0x02, 0x28, 0x20
    defb 0x08, 0x04, 0x1D, 0x20, 0x0A, 0x04, 0x1E, 0x20, 0x0B, 0x04, 0x1D, 0x20, 0x03, 0x06, 0x1E, 0x20
    defb 0x04, 0x06, 0x1D, 0x20, 0x06, 0x06, 0x1D, 0x20, 0x02, 0x03, 0x1E, 0x20, 0x03, 0x03, 0x1D, 0x20
    defb 0x00, 0x09, 0x1A, 0x20, 0x01, 0x09, 0x1A, 0x20, 0x02, 0x09, 0x1A, 0x20, 0x03, 0x09, 0x1A, 0x20
    defb 0x04, 0x09, 0x1A, 0x20, 0x05, 0x09, 0x1A, 0x20, 0x06, 0x09, 0x1A, 0x20, 0x07, 0x09, 0x1A, 0x20
    defb 0x08, 0x09, 0x1A, 0x20, 0x09, 0x09, 0x1A, 0x20, 0x0A, 0x09, 0x1A, 0x20, 0x0B, 0x09, 0x1A, 0x20
    defb 0x0C, 0x09, 0x1A, 0x20, 0x0D, 0x09, 0x1A, 0x20, 0x0E, 0x09, 0x1A, 0x20, 0x08, 0x03, 0x1A, 0x20
    defb 0x09, 0x03, 0x1A, 0x20, 0x0A, 0x03, 0x1A, 0x20, 0x0B, 0x03, 0x1A, 0xFF, 0xFF

._mscce_7

    defb 0x9B, 0xF0, 0xFF, 0x20, 0x09, 0x05, 0x1C, 0x20, 0x08, 0x06, 0x28, 0x20, 0x0A, 0x06, 0x28, 0x20
    defb 0x0C, 0x06, 0x28, 0x20, 0x0E, 0x06, 0x28, 0x20, 0x09, 0x03, 0x28, 0x20, 0x0B, 0x03, 0x28, 0x20
    defb 0x0D, 0x03, 0x28, 0x20, 0x0E, 0x04, 0x28, 0x20, 0x03, 0x08, 0x0B, 0x20, 0x04, 0x08, 0x25, 0x20
    defb 0x09, 0x08, 0x0B, 0x20, 0x02, 0x04, 0x1D, 0x20, 0x03, 0x03, 0x1E, 0x20, 0x04, 0x03, 0x1D, 0x20
    defb 0x0B, 0x07, 0x1D, 0x20, 0x0D, 0x07, 0x1E, 0x20, 0x00, 0x09, 0x1A, 0x20, 0x01, 0x09, 0x1A, 0x20
    defb 0x02, 0x09, 0x1A, 0x20, 0x03, 0x09, 0x1A, 0x20, 0x04, 0x09, 0x1A, 0x20, 0x05, 0x09, 0x1A, 0x20
    defb 0x06, 0x09, 0x1A, 0x20, 0x07, 0x09, 0x1A, 0x20, 0x08, 0x09, 0x1A, 0x20, 0x09, 0x09, 0x1A, 0x20
    defb 0x0A, 0x09, 0x1A, 0x20, 0x0B, 0x09, 0x1A, 0x20, 0x0C, 0x09, 0x1A, 0x20, 0x0D, 0x09, 0x1A, 0x20
    defb 0x0E, 0x09, 0x1A, 0x20, 0x01, 0x03, 0x1A, 0x20, 0x02, 0x03, 0x1A, 0x20, 0x03, 0x02, 0x1A, 0x20
    defb 0x04, 0x02, 0x1A, 0x20, 0x05, 0x02, 0x1A, 0x20, 0x06, 0x02, 0x1A, 0xFF, 0xFF

._mscce_8

    defb 0x7F, 0xF0, 0xFF, 0x20, 0x07, 0x08, 0x25, 0x20, 0x04, 0x00, 0x28, 0x20, 0x06, 0x00, 0x28, 0x20
    defb 0x08, 0x00, 0x28, 0x20, 0x0A, 0x00, 0x28, 0x20, 0x0C, 0x00, 0x28, 0x20, 0x05, 0x02, 0x28, 0x20
    defb 0x01, 0x06, 0x28, 0x20, 0x03, 0x06, 0x28, 0x20, 0x09, 0x01, 0x1D, 0x20, 0x0B, 0x01, 0x1E, 0x20
    defb 0x0D, 0x01, 0x1D, 0x20, 0x0E, 0x01, 0x1E, 0x20, 0x06, 0x04, 0x1D, 0x20, 0x04, 0x07, 0x1D, 0x20
    defb 0x0B, 0x06, 0x1D, 0x20, 0x00, 0x09, 0x1A, 0x20, 0x01, 0x09, 0x1A, 0x20, 0x02, 0x09, 0x1A, 0x20
    defb 0x03, 0x09, 0x1A, 0x20, 0x04, 0x09, 0x1A, 0x20, 0x05, 0x09, 0x1A, 0x20, 0x06, 0x09, 0x1A, 0x20
    defb 0x07, 0x09, 0x1A, 0x20, 0x08, 0x09, 0x1A, 0x20, 0x09, 0x09, 0x1A, 0x20, 0x0A, 0x09, 0x1A, 0x20
    defb 0x0B, 0x09, 0x1A, 0x20, 0x0C, 0x09, 0x1A, 0x20, 0x0D, 0x09, 0x1A, 0x20, 0x0E, 0x09, 0x1A, 0xFF
    defb 0xFF

._mscce_9

    defb 0x97, 0xF0, 0xFF, 0x20, 0x05, 0x05, 0x2D, 0x20, 0x00, 0x00, 0x28, 0x20, 0x02, 0x00, 0x28, 0x20
    defb 0x04, 0x00, 0x28, 0x20, 0x06, 0x00, 0x28, 0x20, 0x08, 0x00, 0x28, 0x20, 0x0A, 0x00, 0x28, 0x20
    defb 0x0C, 0x00, 0x28, 0x20, 0x0E, 0x00, 0x28, 0x20, 0x07, 0x04, 0x28, 0x20, 0x09, 0x04, 0x28, 0x20
    defb 0x0B, 0x04, 0x28, 0x20, 0x0D, 0x04, 0x28, 0x20, 0x03, 0x05, 0x24, 0x20, 0x05, 0x02, 0x23, 0x20
    defb 0x09, 0x02, 0x23, 0x20, 0x09, 0x06, 0x24, 0x20, 0x00, 0x01, 0x1D, 0x20, 0x06, 0x01, 0x1D, 0x20
    defb 0x0B, 0x01, 0x1D, 0x20, 0x0C, 0x01, 0x1E, 0x20, 0x08, 0x05, 0x1D, 0x20, 0x00, 0x09, 0x1A, 0x20
    defb 0x01, 0x08, 0x1A, 0x20, 0x02, 0x08, 0x1A, 0x20, 0x03, 0x07, 0x1A, 0x20, 0x04, 0x07, 0x1A, 0x20
    defb 0x05, 0x06, 0x1A, 0x20, 0x06, 0x07, 0x1A, 0x20, 0x07, 0x07, 0x1A, 0x20, 0x08, 0x07, 0x1A, 0x20
    defb 0x09, 0x07, 0x1A, 0x20, 0x0A, 0x07, 0x1A, 0x20, 0x0B, 0x06, 0x1A, 0x20, 0x0C, 0x06, 0x1A, 0x20
    defb 0x0D, 0x06, 0x1A, 0x20, 0x0E, 0x06, 0x1A, 0xFF, 0xFF

._mscce_10

    defb 0x23, 0xF0, 0xFF, 0x20, 0x03, 0x00, 0x05, 0x20, 0x07, 0x03, 0x2D, 0x20, 0x09, 0x03, 0x2D, 0x20
    defb 0x06, 0x07, 0x2D, 0x20, 0x02, 0x01, 0x2A, 0x20, 0x07, 0x00, 0x2A, 0x20, 0x01, 0x08, 0x26, 0x20
    defb 0x02, 0x08, 0x26, 0xFF, 0xFF

._mscce_11

    defb 0x17, 0xF0, 0xFF, 0x20, 0x01, 0x01, 0x2A, 0x20, 0x04, 0x00, 0x2A, 0x20, 0x0A, 0x01, 0x2A, 0x20
    defb 0x0C, 0x09, 0x26, 0x20, 0x0E, 0x09, 0x01, 0xFF, 0xFF

._mscce_12

    defb 0x1F, 0xF0, 0xFF, 0x20, 0x05, 0x00, 0x2A, 0x20, 0x0D, 0x01, 0x2A, 0x20, 0x00, 0x09, 0x27, 0x20
    defb 0x01, 0x09, 0x26, 0x20, 0x04, 0x09, 0x26, 0x20, 0x05, 0x08, 0x26, 0x20, 0x06, 0x07, 0x26, 0xFF
    defb 0xFF

._mscce_13

    defb 0x13, 0xF0, 0xFF, 0x20, 0x0B, 0x01, 0x28, 0x20, 0x0C, 0x01, 0x28, 0x20, 0x0A, 0x04, 0x28, 0x20
    defb 0x0C, 0x04, 0x28, 0xFF, 0xFF

._mscce_14

    defb 0x23, 0xF0, 0xFF, 0x20, 0x05, 0x04, 0x2D, 0x20, 0x01, 0x01, 0x2A, 0x20, 0x04, 0x02, 0x2A, 0x20
    defb 0x04, 0x00, 0x04, 0x20, 0x05, 0x00, 0x28, 0x20, 0x07, 0x00, 0x28, 0x20, 0x09, 0x00, 0x28, 0x20
    defb 0x0D, 0x00, 0x28, 0xFF, 0xFF

._mscce_15

    defb 0x2B, 0xF0, 0xFF, 0x20, 0x08, 0x06, 0x2D, 0x20, 0x0C, 0x06, 0x2D, 0x20, 0x06, 0x01, 0x2A, 0x20
    defb 0x0C, 0x03, 0x2A, 0x20, 0x0D, 0x02, 0x2A, 0x20, 0x00, 0x00, 0x28, 0x20, 0x02, 0x00, 0x28, 0x20
    defb 0x04, 0x00, 0x28, 0x20, 0x06, 0x00, 0x28, 0x20, 0x08, 0x00, 0x28, 0xFF, 0xFF

._mscce_16

    defb 0x1B, 0xF0, 0xFF, 0x20, 0x04, 0x08, 0x2A, 0x20, 0x0B, 0x01, 0x2A, 0x20, 0x0E, 0x07, 0x2A, 0x20
    defb 0x0B, 0x00, 0x28, 0x20, 0x0C, 0x00, 0x28, 0x20, 0x0E, 0x00, 0x28, 0xFF, 0xFF

._mscce_17

    defb 0x17, 0xF0, 0xFF, 0x20, 0x07, 0x00, 0x2A, 0x20, 0x0B, 0x02, 0x2A, 0x20, 0x0D, 0x04, 0x2A, 0x20
    defb 0x01, 0x00, 0x28, 0x20, 0x02, 0x00, 0x28, 0xFF, 0xFF

._mscce_18

    defb 0x1B, 0xF0, 0xFF, 0x20, 0x03, 0x01, 0x2A, 0x20, 0x02, 0x03, 0x2A, 0x20, 0x08, 0x01, 0x2A, 0x20
    defb 0x04, 0x08, 0x29, 0x20, 0x04, 0x07, 0x2F, 0x20, 0x0A, 0x03, 0x29, 0xFF, 0xFF

._mscce_19

    defb 0x2F, 0xF0, 0xFF, 0x20, 0x0B, 0x06, 0x2D, 0x20, 0x01, 0x01, 0x2A, 0x20, 0x09, 0x01, 0x2A, 0x20
    defb 0x0E, 0x02, 0x2A, 0x20, 0x03, 0x08, 0x29, 0x20, 0x06, 0x09, 0x26, 0x20, 0x07, 0x09, 0x26, 0x20
    defb 0x08, 0x09, 0x26, 0x20, 0x09, 0x09, 0x27, 0x20, 0x0A, 0x09, 0x26, 0x20, 0x0B, 0x09, 0x26, 0xFF
    defb 0xFF

._mscce_20

    defb 0x2F, 0xF0, 0xFF, 0x20, 0x04, 0x08, 0x2D, 0x20, 0x04, 0x02, 0x2A, 0x20, 0x09, 0x01, 0x2A, 0x20
    defb 0x0A, 0x09, 0x26, 0x20, 0x0B, 0x09, 0x26, 0x20, 0x0C, 0x09, 0x26, 0x20, 0x0D, 0x09, 0x27, 0x20
    defb 0x0D, 0x04, 0x1B, 0x20, 0x0E, 0x04, 0x1B, 0x20, 0x0D, 0x03, 0x20, 0x20, 0x0E, 0x03, 0x20, 0xFF
    defb 0xFF

._mscce_21

    defb 0x97, 0xF0, 0xFF, 0x20, 0x01, 0x08, 0x22, 0x20, 0x0A, 0x07, 0x22, 0x20, 0x00, 0x04, 0x1B, 0x20
    defb 0x01, 0x09, 0x1B, 0x20, 0x02, 0x07, 0x1B, 0x20, 0x03, 0x05, 0x1B, 0x20, 0x04, 0x04, 0x1B, 0x20
    defb 0x05, 0x04, 0x1B, 0x20, 0x06, 0x04, 0x1B, 0x20, 0x07, 0x04, 0x1B, 0x20, 0x08, 0x04, 0x1B, 0x20
    defb 0x09, 0x06, 0x1B, 0x20, 0x0A, 0x08, 0x1B, 0x20, 0x0B, 0x09, 0x1B, 0x20, 0x0C, 0x07, 0x1B, 0x20
    defb 0x0D, 0x05, 0x1B, 0x20, 0x0E, 0x07, 0x1B, 0x20, 0x00, 0x03, 0x20, 0x20, 0x01, 0x03, 0x20, 0x20
    defb 0x02, 0x03, 0x20, 0x20, 0x03, 0x03, 0x20, 0x20, 0x04, 0x03, 0x20, 0x20, 0x05, 0x03, 0x20, 0x20
    defb 0x06, 0x03, 0x20, 0x20, 0x08, 0x03, 0x20, 0x20, 0x09, 0x03, 0x20, 0x20, 0x0A, 0x03, 0x20, 0x20
    defb 0x0B, 0x03, 0x20, 0x20, 0x0C, 0x03, 0x20, 0x20, 0x0D, 0x03, 0x20, 0x20, 0x0E, 0x03, 0x20, 0x20
    defb 0x01, 0x06, 0x21, 0x20, 0x02, 0x04, 0x21, 0x20, 0x09, 0x04, 0x21, 0x20, 0x0B, 0x06, 0x21, 0x20
    defb 0x0C, 0x04, 0x21, 0x20, 0x0E, 0x05, 0x21, 0xFF, 0xFF

._mscce_22

    defb 0x9F, 0xF0, 0xFF, 0x20, 0x04, 0x08, 0x22, 0x20, 0x07, 0x08, 0x22, 0x20, 0x00, 0x07, 0x1B, 0x20
    defb 0x01, 0x07, 0x1B, 0x20, 0x02, 0x09, 0x1B, 0x20, 0x03, 0x08, 0x1B, 0x20, 0x04, 0x09, 0x1B, 0x20
    defb 0x05, 0x09, 0x1B, 0x20, 0x06, 0x09, 0x1B, 0x20, 0x07, 0x09, 0x1B, 0x20, 0x08, 0x09, 0x1B, 0x20
    defb 0x09, 0x08, 0x1B, 0x20, 0x0A, 0x06, 0x1B, 0x20, 0x0B, 0x04, 0x1B, 0x20, 0x0C, 0x03, 0x1B, 0x20
    defb 0x0D, 0x02, 0x1B, 0x20, 0x0E, 0x02, 0x1B, 0x20, 0x00, 0x03, 0x20, 0x20, 0x01, 0x03, 0x20, 0x20
    defb 0x02, 0x03, 0x20, 0x20, 0x03, 0x03, 0x20, 0x20, 0x04, 0x03, 0x20, 0x20, 0x05, 0x03, 0x20, 0x20
    defb 0x06, 0x03, 0x20, 0x20, 0x07, 0x03, 0x20, 0x20, 0x08, 0x03, 0x20, 0x20, 0x09, 0x03, 0x20, 0x20
    defb 0x0A, 0x03, 0x20, 0x20, 0x00, 0x05, 0x21, 0x20, 0x01, 0x04, 0x21, 0x20, 0x02, 0x08, 0x21, 0x20
    defb 0x02, 0x06, 0x21, 0x20, 0x04, 0x05, 0x21, 0x20, 0x04, 0x06, 0x21, 0x20, 0x05, 0x07, 0x21, 0x20
    defb 0x06, 0x04, 0x21, 0x20, 0x07, 0x06, 0x21, 0x20, 0x08, 0x05, 0x21, 0x20, 0x0A, 0x04, 0x21, 0xFF
    defb 0xFF

._mscce_23

    defb 0x6F, 0xF0, 0xFF, 0x20, 0x09, 0x05, 0x22, 0x20, 0x00, 0x02, 0x1B, 0x20, 0x01, 0x02, 0x1B, 0x20
    defb 0x02, 0x02, 0x1B, 0x20, 0x03, 0x03, 0x1B, 0x20, 0x04, 0x03, 0x1B, 0x20, 0x05, 0x04, 0x1B, 0x20
    defb 0x06, 0x04, 0x1B, 0x20, 0x07, 0x05, 0x1B, 0x20, 0x08, 0x05, 0x1B, 0x20, 0x09, 0x06, 0x1B, 0x20
    defb 0x0A, 0x06, 0x1B, 0x20, 0x0B, 0x07, 0x1B, 0x20, 0x0B, 0x03, 0x1B, 0x20, 0x0C, 0x07, 0x1B, 0x20
    defb 0x0D, 0x08, 0x1B, 0x20, 0x0E, 0x08, 0x1B, 0x20, 0x08, 0x04, 0x20, 0x20, 0x09, 0x04, 0x20, 0x20
    defb 0x0A, 0x04, 0x20, 0x20, 0x0B, 0x04, 0x20, 0x20, 0x0C, 0x04, 0x20, 0x20, 0x0D, 0x04, 0x20, 0x20
    defb 0x0E, 0x04, 0x20, 0x20, 0x0B, 0x05, 0x21, 0x20, 0x0D, 0x06, 0x21, 0x20, 0x0E, 0x05, 0x21, 0xFF
    defb 0xFF

._mscce_24

    defb 0xB3, 0xF0, 0xFF, 0x20, 0x07, 0x08, 0x22, 0x20, 0x0B, 0x08, 0x22, 0x20, 0x00, 0x08, 0x1B, 0x20
    defb 0x01, 0x08, 0x1B, 0x20, 0x02, 0x09, 0x1B, 0x20, 0x03, 0x09, 0x1B, 0x20, 0x04, 0x09, 0x1B, 0x20
    defb 0x05, 0x09, 0x1B, 0x20, 0x06, 0x09, 0x1B, 0x20, 0x07, 0x09, 0x1B, 0x20, 0x08, 0x09, 0x1B, 0x20
    defb 0x09, 0x09, 0x1B, 0x20, 0x0A, 0x09, 0x1B, 0x20, 0x0B, 0x09, 0x1B, 0x20, 0x0C, 0x09, 0x1B, 0x20
    defb 0x0D, 0x09, 0x1B, 0x20, 0x0E, 0x09, 0x1B, 0x20, 0x03, 0x06, 0x1B, 0x20, 0x05, 0x04, 0x1B, 0x20
    defb 0x0A, 0x04, 0x1B, 0x20, 0x00, 0x04, 0x20, 0x20, 0x01, 0x04, 0x20, 0x20, 0x02, 0x04, 0x20, 0x20
    defb 0x03, 0x04, 0x20, 0x20, 0x04, 0x04, 0x20, 0x20, 0x06, 0x04, 0x20, 0x20, 0x07, 0x04, 0x20, 0x20
    defb 0x08, 0x04, 0x20, 0x20, 0x09, 0x04, 0x20, 0x20, 0x0B, 0x04, 0x20, 0x20, 0x0C, 0x04, 0x20, 0x20
    defb 0x0D, 0x04, 0x20, 0x20, 0x0E, 0x04, 0x20, 0x20, 0x01, 0x06, 0x21, 0x20, 0x02, 0x05, 0x21, 0x20
    defb 0x05, 0x06, 0x21, 0x20, 0x06, 0x05, 0x21, 0x20, 0x06, 0x08, 0x21, 0x20, 0x07, 0x07, 0x21, 0x20
    defb 0x09, 0x06, 0x21, 0x20, 0x09, 0x07, 0x21, 0x20, 0x0C, 0x07, 0x21, 0x20, 0x0D, 0x05, 0x21, 0x20
    defb 0x0E, 0x07, 0x21, 0xFF, 0xFF

._mscce_25

    defb 0x9B, 0xF0, 0xFF, 0x20, 0x09, 0x08, 0x22, 0x20, 0x00, 0x09, 0x1B, 0x20, 0x01, 0x03, 0x1B, 0x20
    defb 0x02, 0x05, 0x1B, 0x20, 0x03, 0x07, 0x1B, 0x20, 0x04, 0x08, 0x1B, 0x20, 0x05, 0x08, 0x1B, 0x20
    defb 0x06, 0x09, 0x1B, 0x20, 0x07, 0x09, 0x1B, 0x20, 0x08, 0x09, 0x1B, 0x20, 0x09, 0x09, 0x1B, 0x20
    defb 0x0A, 0x09, 0x1B, 0x20, 0x0B, 0x09, 0x1B, 0x20, 0x0C, 0x08, 0x1B, 0x20, 0x0D, 0x06, 0x1B, 0x20
    defb 0x03, 0x01, 0x1B, 0x20, 0x00, 0x04, 0x20, 0x20, 0x02, 0x04, 0x20, 0x20, 0x03, 0x04, 0x20, 0x20
    defb 0x04, 0x04, 0x20, 0x20, 0x05, 0x04, 0x20, 0x20, 0x06, 0x04, 0x20, 0x20, 0x07, 0x04, 0x20, 0x20
    defb 0x08, 0x04, 0x20, 0x20, 0x09, 0x04, 0x20, 0x20, 0x0A, 0x04, 0x20, 0x20, 0x0B, 0x04, 0x20, 0x20
    defb 0x0C, 0x04, 0x20, 0x20, 0x0D, 0x04, 0x20, 0x20, 0x04, 0x05, 0x21, 0x20, 0x05, 0x06, 0x21, 0x20
    defb 0x06, 0x08, 0x21, 0x20, 0x07, 0x07, 0x21, 0x20, 0x07, 0x05, 0x21, 0x20, 0x08, 0x06, 0x21, 0x20
    defb 0x0A, 0x08, 0x21, 0x20, 0x0A, 0x05, 0x21, 0x20, 0x0C, 0x06, 0x21, 0xFF, 0xFF

._msccf_0

    defb 0x08, 0x20, 0x0D, 0x07, 0xFF, 0xE4, 0x04, 0x6F, 0xFF, 0xFF

._msccf_1

    defb 0x08, 0x20, 0x04, 0x08, 0xFF, 0xE4, 0x01, 0x6F, 0xFF, 0x08, 0x20, 0x0A, 0x03, 0xFF, 0xE4, 0x02
    defb 0x6F, 0xFF, 0xFF

._msccf_2

    defb 0x08, 0x20, 0x03, 0x08, 0xFF, 0xE4, 0x03, 0x6F, 0xFF, 0xFF

._msccf_3

    defb 0x10, 0x21, 0x30, 0x4F, 0x22, 0x70, 0x7F, 0x40, 0xFF, 0x10, 0x01, 0x01, 0x41, 0x01, 0xE0, 0x07
    defb 0xFF, 0x0C, 0x21, 0x30, 0x4F, 0x22, 0x70, 0x7F, 0x10, 0x01, 0x0F, 0xFF, 0xF1, 0xFF, 0xFF

#endasm
 
unsigned char *script;
 
void msc_init_all (void) {
    unsigned char i;
    for (i = 0; i < MAX_FLAGS; i ++)
        flags [i] = 0;
}
 
unsigned char read_byte (void) {
    unsigned char c;
    c = script [0];
    script ++;
    return c;
}
 
unsigned char read_vbyte (void) {
    unsigned char c;
    c = read_byte ();
    if (c & 128) return flags [c & 127];
    return c;
}
 
// Ejecutamos el script apuntado por *script:
void run_script (void) {
    unsigned char terminado = 0;
    unsigned char continuar = 0;
    unsigned char x, y, n, m, c;
    unsigned char *next_script;
 
    if (script == 0)
        return; 
 
    script_something_done = 0;
 
    while (1) {
        c = read_byte ();
        if (c == 0xFF) break;
        next_script = script + c;
        terminado = continuar = 0;
        while (!terminado) {
            c = read_byte ();
            switch (c) {
                case 0x10:
                    // IF FLAG x = n
                    // Opcode: 10 x n
                    x = read_vbyte ();
                    n = read_vbyte ();
                    terminado = (flags [x] != n);
                    break;
                case 0x20:
                    // IF PLAYER_TOUCHES x, y
                    // Opcode: 20 x y
                    x = read_vbyte ();
                    y = read_vbyte ();
                    terminado = (!((player.x >> 6) >= (x << 4) - 15 && (player.x >> 6) <= (x << 4) + 15 && (player.y >> 6) >= (y << 4) - 15 && (player.y >> 6) <= (y << 4) + 15));
                    break;
                case 0x21:
                    // IF PLAYER_IN_X x1, x2
                    // Opcode: 21 x1 x2
                    x = read_byte ();
                    y = read_byte ();
                    terminado = (!((player.x >> 6) >= x && (player.x >> 6) <= y));
                    break;
                case 0x22:
                    // IF PLAYER_IN_Y y1, y2
                    // Opcode: 22 y1 y2
                    x = read_byte ();
                    y = read_byte ();
                    terminado = (!((player.y >> 6) >= x && (player.y >> 6) <= y));
                    break;
                case 0x31:
                    // IF ENEMIES_KILLED_EQUALS n
                    // Opcode: 31 n
                    n = read_vbyte ();
                    terminado = (player.killed != n);
                    break;
                case 0x40:
                     // IF PLAYER_HAS_OBJECTS
                     // Opcode: 40
                     terminado = (player.objs == 0);
                     break;
                case 0xF0:
                     // IF TRUE
                     // Opcode: F0
                     break;
                case 0xFF:
                    // THEN
                    // Opcode: FF
                    terminado = 1;
                    continuar = 1;
                    script_something_done = 1;
                    break;
            }
        }
        if (continuar) {
            terminado = 0;
            while (!terminado) {
                c = read_byte ();
                switch (c) {
                    case 0x01:
                        // SET FLAG x = n
                        // Opcode: 01 x n
                        x = read_vbyte ();
                        n = read_vbyte ();
                        flags [x] = n;
                        break;
                    case 0x10:
                        // INC FLAG x, n
                        // Opcode: 10 x n
                        x = read_vbyte ();
                        n = read_vbyte ();
                        flags [x] += n;
                        break;
                    case 0x20:
                        // SET TILE (x, y) = n
                        // Opcode: 20 x y n
                        x = read_vbyte ();
                        y = read_vbyte ();
                        n = read_vbyte ();
                        map_buff [x + (y << 4) - y] = n;
                        map_attr [x + (y << 4) - y] = comportamiento_tiles [n];
                        draw_coloured_tile (VIEWPORT_X + x + x, VIEWPORT_Y + y + y, n);
                        break;
                    case 0x41:
                        // DEC OBJECTS n
                        // Opcode: 41 n
                        n = read_vbyte ();
                        player.objs -= n;
                        draw_objs ();
                        break;
                    case 0x6F:
                        // REENTER
                        // Opcode: 6F
                        script_result = 3; terminado = 1;
                        break;
                    case 0xE0:
                        // SOUND n
                        // Opcode: E0 n
                        n = read_vbyte ();
#ifdef MODE_128K
                        wyz_play_sound (n);
#else
                        peta_el_beeper (n);
#endif
                        break;
                    case 0xE4:
                        // EXTERN n
                        // Opcode: 0xE4 n
                        n = read_vbyte ();
                        do_extern_action (n);
                        break;
                    case 0xF1:
                        script_result = 1;
                        terminado = 1;
                        break;
                    case 0xFF:
                        terminado = 1;
                        break;
                }
            }
        }
        script = next_script;
    }
    if (script_result == 3) {
        script_result = 0;
        draw_scr ();
    }
}
